ТЗ вк.
===========
Единая программа на Python для работы с документами ВКонтакте, управляемая оконным с графическим интерфейсом.

Пожелания:
постараться логику работы с сайтом вынести в отдельный модуль, чтобы потом можно было добавить поддержку других сайтов - архива, викимедии.


Указанное в скобках и курсивом - это идеи для функций, желаемых в будущем, их не следует реализовывать на начальном этапе.


Понятия
=======
* Свои документы - это:
документы загруженные пользователем на сервер, которые он может контролировать.
(также документы групп, в которых у пользователя есть доступ к администрированию документов, работу с документами групп пока нет необхоимости реализовывать)


Аутентификация.
==============
* если она не произведена, предлагать это в отдельном диалоговом окне. 
* два метода - через логин и пароль или направление браузера на страницу, где можно получить access token.
* данные для доступа на сервер, полученные от сервера при успешной аутентификации, программа сохраняет для использования при повторных запусках.


Основное окно
============
В окне отображается большая таблица со списком документов, кнопки для управления и некоторые другие элементы.


Столбцы в таблице:
При скачивании и отборе: название, тип, размер, метки, имя владельца как ссылка на страницу (как получить последнее см. ниже). 
Для своих документов также: доступность (частный / общий)
При загрузке: название, метки, тип, размер, доступность (по умолчанию делать   документы публичными)

При наведении курсора на элементы таблицы всплывает подсказка, где будет отображено оригинальное название документа, если он был переименован пользователем.

В таблице галочки для выбора документов
По умолчанию выбраны все. Возможность выбрать все, отменить выбор всех.

Кнопки:
* Выбрать папку,
* Выбрать файлы...
* Скачать
* Загрузить
* Войти/Выйти (аутентификация).
(сохранить текущий список - может быть полезно, если были внесены значительные данные, но операция с сервером пока не выполнена)


Поиск 
======
* поиск по запросу
* отображение своих документов. когда поиска нет.
* галочки только по своим документам, только по общим документам
* чтобы можно было сразу по нескольким запросам
объединять запросы знаком +


Отбор
======
* отбор из своих документов (или из найденных)
* отбор осуществляется по подстроке (или по регулярному выражению)
* чтобы такой фильтр сразу показывал в таблице, какие документы он отбирает
* (чтобы или оставить только соответствующие или исключить их.
чтобы сделать исключающий отбор использовать знак -.)


Редактирование
=============
* переименование
* Для документов на сервере и при загрузке:
** проставление или удаление меток выбранным. 
** изменение статуса личный / общий. вконтакте это Тип документа: "Личный" или "Книга"
изменение типа документа на Книга или другой публичный если невозможно напрямую через API, то делать это путём, описанным ниже.


Переименование
==============
* поиск и замена по простому или регулярному выражению
изменять по именам документов и по меткам
* в списке на скачивание документов переименование
** задает имя файла, с которым будет сохранен документ.
если у пользователя есть контроль над документом (это документ его или группы, где у него есть права управления документами), то переименовать его и на сервере.
** в списке на загрузку переименование
задаёт название документа, под которым он будет загружен на сервер.


Скачивание
==========
* папка задаётся нажатием кнопки Выбрать папку...
* скачиваются только выбранные документы.

* Имена файлов должны быть такими, какими они заданы в таблице, в них может быть кириллица, греческие буквы и др. символы (имена файлов не преобразуются в латиницу, как это делает ВК при скачивании через браузер). Недопустимые символы (зависящие от операционной системы) в именах файлов удаляются.
* расширение задаётся по типу документа и обязательно ставится.
* если в названии документа уже есть расширение, оно удаляется, чтобы избежать на конце имён файлов .pdf.pdf, .djvu.djvu и т.п.

* (чтобы задания на скачивание выполнялись в фоновом режиме, и можно было продолжать работать с интерфейсом и с другими документами.)
* (галочка - скачивать в подпапки, равные запросам, когда несколько запросов)

Загрузка
========
* делать все загружаемые документы доступными через поиск (по умолчанию)
* при выборе для загрузки папки или папок, по умолчанию проставлять метки, равные подпапкам, начиная с:
** если документ находится в известной папке операционной системы, например, Документы, то начинать с подпапоки каталога Документы.
если документ не находится в особой известной папке системы, то проставлять метки, начиная с первого каталога на диске в пути.
* (делать поисковые запросы по именам загружаемых файлов и показывать, существуют ли уже на сервере документы с такими названиями, каковы отличия их в размере, дате.)


Редактирование 
=============
* возможно только для своих документов
* проставлять метки выбранным
* массово переименовывать - делать замены в именах документов по подстроке или регулярному выражению.
* делать публичными или личными выбранные.


Дополнительные указания:
* Узнать ссылку на страницу владельца документа можно по id документа: число до подчеркивания - это id владельца.
* изменение типа документа на Книга или другой публичный, если это невозможно напрямую через API, то делать это путём создания на стене пользователя записи с прикрепленными документами (до 10 шт., проверить этот лимит), с последующим удалением этой записи. При публикации таких записей документы становятся публичными.
Не теряются ли при этом метки? (проверить)


ТЗ

Программа на Python для работы с архивом archive.org, управляемая ключами командной строки.

Ключ -search (-s) - 25% стоимости программы
1) считывает запросы к архиву из xlsx-файла "queries.xlsx" (если из параметра cmd, то имена каталогов равны запросам),
имеющего формат записи:
query, dir_name
где
query - запрос,
dir_name - имя каталога;
2) получает массив записей с метаданными item'ов на Архиве в результате выполнения всех запросов.
При дублировании идентификатора повторные вхождения игнорируются;
2.1) уже на данном этапе отбираются только файлы pdf, djvu, mp3, ogg, если таковых нет - item пропускается;
3) для каждого идентификатора составляется название книги, состоящее из значений текстовых полей title, creator, year.
Общая длина названия не должна превышать 127 символов. Из поля title извлекается текст, дополняющий название книги до 127 символов,
в конце добавляются символы "...". Если поле title пустое, то запись пропускается. Из поля creator извлекаются значения только
фамилии и имени/инициалов (без расшифровки имени и годов жизни). Если поле creator пустое, то имя автора не добавляется к названию.
При отсутствии в поле year значений, то информация о дате издания не добавляется к названию книги;
4) в случае, если в item находится более 1 файла одного из интересующих нас типов, то в названия файлов этого типа включаются номера в скобках без дополнения нулями;
5) в файле "download.xlsx" сохраняются записи с полями, отсортированными по "query" и по имени файла из "out_file_name" в прямом алфавитном порядке:
query, identifier, title, creator, in_file_name, out_file_path
где
query - запрос,
identifier, title, creator - поля из метаданных,
in_file_name - имя исходного файла (с путём к подкаталогу в item, если есть),
out_file_path - относительный путь к выходному файлу, в котором учитывается dir_name из "queries.xlsx" и путь к подкаталогу в item, если он есть.
Для файлов из корня item имя файла в out_file_name - это сформированное название книги,
для файлов из подкаталогов в item, если они есть, - это их названия, как на Архиве, без изменений.
6) записываемые в файл данные выводятся на экран.

Ключ -filter (-f) - 10% стоимости программы
Может указываться вместе с -search (-s), а может самостоятельно.
1) фильтрует записи в файле "download.xlsx" на основе указанного поля и регулярного выражения (по принципу или включения, или исключения)
2) результат записывается в тот же файл, если при вызове не было ключа -search (-s).

Ключ -download (-d) - 25% стоимости программы
1) считывает данные из файла "download.xlsx";
2) по очереди перебирает все записи из "in_file_name";
3) для каждой из них определяет "identifier" и загружает файл;
4) файл под именем "out_file_name" сохраняется в каталог "dir_name".

(На этом этапе предполагается по полученным данным прогнать такой алгоритм: https://youdo.com/t8332796. Он ещё не реализован. Конечно, не прошу сразу всё, просто логику показываю.)

Ключ -template (-t) - 15% стоимости программы.
1) создает файл "upload.xlsx", с полями:
dir_name, identifier, title, creator, subject, description, language, [metadata]
где
dir_name - имя каталога,
далее - поля метаданных,
[metadata] - названия дополнительных полей метаданных, задаются необязательным перечислением как аргумент командной строки в кавычках через запятую;
2) проходит по всему древу подкаталогов текущаго каталога
и заполняет:
поле "dir_name" - относительными путями к подкаталогам;
поля "title" и "description" - именами подкаталогов;
поле subject - именами подкаталогов из пути к данному подкаталогу, через разделитель;
поле language - языком, преобладающим в именах файлов в подкаталоге. Если у вас есть способ по строкам unicode определять язык - использовать его. Есть нет - проверять названия на количество русских, греческих и английских символов, и ставить язык, судя по тому, каких больше.
поле creator - возможными данными, взятыми из имен подкаталога и файлов в нем, а именно:
* если в имени присутствуют такие подстроки: св., святой, святаго, свт., святитель, прп., преп., преподобн, Блж., блаж., блаженн, Сщмч., священномученик, прот., протоиере, священник, свящ., иер., иерей, еп., епископ., архиеп., архиепископ, Архим., Архимандрит, иером., иеромонах, монах, инок, старец, αγιος, αγ., αγίου, οσιος, οσίου, μακαρίου, μακάριος, μακαρ, st., saint (список чтобы можно было брать откуда-то и расширять)
то брать слово полностью с этими подстроками и следующие за ним два слова, например, прп. Сергий Радонежский. Второе слово может быть в скобках - сохранять их. Если в имени присутствует ещё короткое словечко, такое как of, του или ο, что бывает в греческом и английском, например, Αγίου Ιωάννου του Χρυσοστόμου, St. Martin of Tours, то включать и его и брать целиком такое имя)
* если есть что-то похожее на инициалы - две заглавные буквы с точками, то берётся слово перед ними и они;
* берутся все такие найденные без учета регистра имена авторов, и добавляются в поле creator, но не более определённого количества. 

Ключ -upload (-u) - 25% стоимости программы.
1) рекурсивно перебирает подкаталоги каталога, указанного параметром -dir (-d), если он не указан, то - текущаго;
2) если в каталоге есть файлы, то для этого каталога создаёт свой item, беря метаданные из файла "upload.xlsx", какие найдёт, если они есть;
2.1) необходимо учитывать, что на Архиве одно поле метаданных может иметь несколько значений, например, subject[1], subject[2] и т п.
3) загружает в item все файлы из каталога без учета подкаталогов, но не более 10000 файлов и общим размером не более 100Гбайт;
3.1) если длина имени какого-то файла превосходит 127 символов, то обрезает по границе слова, чтобы уместиться в 127 символов.
4) при неудачных попытках загрузка повторяется заданное число попыток, с паузами, в секундах.

